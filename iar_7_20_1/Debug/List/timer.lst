###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.2.160/W32 for ARM         14/Oct/2018  14:43:39
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_common\drivers\timer.c
#    Command line =  
#        -f C:\Users\BUDWA_~1\AppData\Local\Temp\EWE2ED.tmp
#        (C:\Embedded\Firmware\git_Razor_Atmel\firmware_common\drivers\timer.c
#        -D EIE1 --preprocess=c
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\List
#        -lC
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\List
#        -o
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\ -I
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\..\bsp\
#        -I
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\..\drivers\
#        -I
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\..\application\
#        -I
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\
#        -I
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\application\
#        -I
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\cmsis\
#        -I
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\drivers\
#        -On --use_c++_inline --require_prototypes -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.1\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\List\timer.lst
#    Object file  =  
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\Obj\timer.o
#
###############################################################################

C:\Embedded\Firmware\git_Razor_Atmel\firmware_common\drivers\timer.c
      1          /**********************************************************************************************************************
      2          File: timer.c                                                                
      3          
      4          Description:
      5          Provide easy access to setting up and running the Timer Counter (TC) Peripherals.
      6          
      7          ------------------------------------------------------------------------------------------------------------------------
      8          API:
      9          
     10          Public functions:
     11          void TimerSet(TimerChannelType eTimerChannel_, u16 u16TimerValue_)
     12          e.g. 
     13          TimerSet(TIMER_CHANNEL1, 0xFFFF);
     14          
     15          void TimerStart(TimerChannelType eTimerChannel_)
     16          e.g.
     17          TimeStart(TIMER_CHANNEL1);
     18          
     19          void TimerStop(TimerChannelType eTimerChannel_)
     20          e.g.
     21          TimerStop(TIMER_CHANNEL1);
     22          
     23          u16 TimerGetTime(TimerChannelType eTimerChannel_)
     24          e.g.
     25          u16 u16Timer1CurrentValue;
     26          u16Timer1CurrentValue = TimerGetTime(TIMER_CHANNEL1);
     27          
     28          void TimerAssignCallback(TimerChannelType eTimerChannel_, fnCode_type fpUserCallback_)
     29          e.g.
     30          TimerAssignCallback(TIMER_CHANNEL1, UserAppCallback);
     31          where UserAppCallBack is defined in a user task:
     32          void UserAppCallBack(void)
     33          Note: any callback should execute as quickly as possible since it runs during
     34          the timer interrupt handler.
     35          
     36          
     37          Protected System functions:
     38          void TimerInitialize(void)
     39          Runs required initialzation for the task.  Should only be called once in main init section.
     40          
     41          void TimerRunActiveState(void)
     42          Runs current task state.  Should only be called once in main loop.
     43          
     44          
     45          **********************************************************************************************************************/
     46          
     47          #include "configuration.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \        0x0   0x2201             MOVS     R2,#+1
   \        0x2   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0x6   0x408A             LSLS     R2,R2,R1
   \        0x8   0x....             LDR.N    R1,??DataTable9  ;; 0xe000e100
   \        0xA   0x0003             MOVS     R3,R0
   \        0xC   0xB25B             SXTB     R3,R3            ;; SignExt  R3,R3,#+24,#+24
   \        0xE   0x095B             LSRS     R3,R3,#+5
   \       0x10   0xF841 0x2023      STR      R2,[R1, R3, LSL #+2]
   \       0x14   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_ClearPendingIRQ(IRQn_Type)
   \                     NVIC_ClearPendingIRQ: (+1)
   \        0x0   0x2201             MOVS     R2,#+1
   \        0x2   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0x6   0x408A             LSLS     R2,R2,R1
   \        0x8   0x....             LDR.N    R1,??DataTable9_1  ;; 0xe000e280
   \        0xA   0x0003             MOVS     R3,R0
   \        0xC   0xB25B             SXTB     R3,R3            ;; SignExt  R3,R3,#+24,#+24
   \        0xE   0x095B             LSRS     R3,R3,#+5
   \       0x10   0xF841 0x2023      STR      R2,[R1, R3, LSL #+2]
   \       0x14   0x4770             BX       LR               ;; return
     48          
     49          /***********************************************************************************************************************
     50          Global variable definitions with scope across entire project.
     51          All Global variable names shall start with "G_"
     52          ***********************************************************************************************************************/
     53          /* New variables */

   \                                 In section .bss, align 4
     54          volatile u32 G_u32TimerFlags;                          /* Global state flags */
   \                     G_u32TimerFlags:
   \        0x0                      DS8 4
     55          
     56          
     57          /*--------------------------------------------------------------------------------------------------------------------*/
     58          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     59          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     60          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     61          
     62          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     63          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     64          
     65          
     66          /***********************************************************************************************************************
     67          Global variable definitions with scope limited to this local application.
     68          Variable names shall start with "Timer_" and be declared as static.
     69          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     70          static fnCode_type Timer_StateMachine;            /* The state machine function pointer */
   \                     Timer_StateMachine:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     71          static fnCode_type fpTimer1Callback;              /* Timer1 ISR callback function pointer */
   \                     fpTimer1Callback:
   \        0x0                      DS8 4
     72          
     73          //static u32 Timer_u32Timeout;                      /* Timeout counter used across states */
     74          

   \                                 In section .bss, align 4
     75          static u32 Timer_u32Timer1Counter = 0;            /* Track instances of The TC1 interrupt handler */
   \                     Timer_u32Timer1Counter:
   \        0x0                      DS8 4
     76          
     77          
     78          /**********************************************************************************************************************
     79          Function Definitions
     80          **********************************************************************************************************************/
     81          
     82          /*--------------------------------------------------------------------------------------------------------------------*/
     83          /* Public functions                                                                                                   */
     84          /*--------------------------------------------------------------------------------------------------------------------*/
     85          
     86          /*----------------------------------------------------------------------------------------------------------------------
     87          Function: TimerSet
     88          
     89          Description
     90          Sets the timer tick period (interrupt rate).
     91          
     92          Requires:
     93            - eTimerChannel_ holds a valid channel
     94            - u16TimerValue_ x in ticks
     95          
     96          Promises:
     97            - Updates TC_RC value with u16TimerValue_
     98          */

   \                                 In section .text, align 2, keep-with-next
     99          void TimerSet(TimerChannelType eTimerChannel_, u16 u16TimerValue_)
    100          {
    101            /* Build the offset to the selected peripheral */
    102            u32 u32TimerBaseAddress = (u32)AT91C_BASE_TC0;
   \                     TimerSet: (+1)
   \        0x0   0x....             LDR.N    R3,??DataTable9_2  ;; 0x40080000
    103            u32TimerBaseAddress += (u32)eTimerChannel_;
   \        0x2   0x0002             MOVS     R2,R0
   \        0x4   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \        0x6   0x18D3             ADDS     R3,R2,R3
    104          
    105            /* Load the new timer value */
    106            (AT91_CAST(AT91PS_TC)u32TimerBaseAddress)->TC_RC = (u32)(u16TimerValue_ & 0x0000FFFF);
   \        0x8   0x000A             MOVS     R2,R1
   \        0xA   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \        0xC   0x61DA             STR      R2,[R3, #+28]
    107          
    108          } /* end TimerSet() */
   \        0xE   0x4770             BX       LR               ;; return
    109          
    110          
    111          /*----------------------------------------------------------------------------------------------------------------------
    112          Function: TimerStart
    113          
    114          Description
    115          Starts the designated Timer.
    116          
    117          Requires:
    118            - eTimerChannel_ is the timer to start
    119          
    120          Promises:
    121            - Specified channel on Timer is set to run; if already running it remains running
    122            - Does NOT reset the timer value
    123          */

   \                                 In section .text, align 2, keep-with-next
    124          void TimerStart(TimerChannelType eTimerChannel_)
    125          {
    126            /* Build the offset to the selected peripheral */
    127            u32 u32TimerBaseAddress = (u32)AT91C_BASE_TC0;
   \                     TimerStart: (+1)
   \        0x0   0x....             LDR.N    R2,??DataTable9_2  ;; 0x40080000
    128            u32TimerBaseAddress += (u32)eTimerChannel_;
   \        0x2   0x0001             MOVS     R1,R0
   \        0x4   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \        0x6   0x188A             ADDS     R2,R1,R2
    129          
    130            /* Ensure clock is enabled and triggered */
    131            (AT91_CAST(AT91PS_TC)u32TimerBaseAddress)->TC_CCR |= (AT91C_TC_CLKEN | AT91C_TC_SWTRG);
   \        0x8   0x6811             LDR      R1,[R2, #+0]
   \        0xA   0xF051 0x0105      ORRS     R1,R1,#0x5
   \        0xE   0x6011             STR      R1,[R2, #+0]
    132            
    133          } /* end TimerStart() */
   \       0x10   0x4770             BX       LR               ;; return
    134          
    135          
    136          /*----------------------------------------------------------------------------------------------------------------------
    137          Function: TimerStop
    138          
    139          Description
    140          Stops the designated Timer.
    141          
    142          Requires:
    143            - eTimerChannel_ is the timer to stop
    144          
    145          Promises:
    146            - Specified timer is stopped; if already stopped it remains stopped
    147            - Does NOT reset the timer value
    148          */

   \                                 In section .text, align 2, keep-with-next
    149          void TimerStop(TimerChannelType eTimerChannel_)
    150          {
    151            /* Build the offset to the selected peripheral */
    152            u32 u32TimerBaseAddress = (u32)AT91C_BASE_TC0;
   \                     TimerStop: (+1)
   \        0x0   0x....             LDR.N    R2,??DataTable9_2  ;; 0x40080000
    153            u32TimerBaseAddress += (u32)eTimerChannel_;
   \        0x2   0x0001             MOVS     R1,R0
   \        0x4   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \        0x6   0x188A             ADDS     R2,R1,R2
    154            
    155            /* Ensure clock is disabled */
    156            (AT91_CAST(AT91PS_TC)u32TimerBaseAddress)->TC_CCR |= AT91C_TC_CLKDIS;
   \        0x8   0x6811             LDR      R1,[R2, #+0]
   \        0xA   0xF051 0x0102      ORRS     R1,R1,#0x2
   \        0xE   0x6011             STR      R1,[R2, #+0]
    157            
    158          } /* end TimerStop */
   \       0x10   0x4770             BX       LR               ;; return
    159          
    160          
    161          /*----------------------------------------------------------------------------------------------------------------------
    162          Function: TimerGetTime
    163          
    164          Description
    165          Returns the current count.
    166          
    167          Requires:
    168            - eTimerChannel_ is the timer to query
    169          
    170          Promises:
    171            - Current 16 bit timer value is returned
    172          */

   \                                 In section .text, align 2, keep-with-next
    173          u16 TimerGetTime(TimerChannelType eTimerChannel_)
    174          {
   \                     TimerGetTime: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    175           
    176            /* Build the offset to the selected peripheral */
    177            u32 u32TimerBaseAddress = (u32)AT91C_BASE_TC0;
   \        0x2   0x....             LDR.N    R2,??DataTable9_2  ;; 0x40080000
    178            u32TimerBaseAddress += (u32)eTimerChannel_;
   \        0x4   0x0008             MOVS     R0,R1
   \        0x6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \        0x8   0x1882             ADDS     R2,R0,R2
    179            
    180            /* Read and format the timer count */
    181            return ((u16)( (AT91_CAST(AT91PS_TC)u32TimerBaseAddress)->TC_CV & 0x0000FFFF));
   \        0xA   0x6910             LDR      R0,[R2, #+16]
   \        0xC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \        0xE   0x4770             BX       LR               ;; return
    182            
    183          } /* end TimerGetTime */
    184          
    185          
    186          /*----------------------------------------------------------------------------------------------------------------------
    187          Function: TimerAssignCallback
    188          
    189          Description
    190          Allows user to specify a custom callback function for when the Timer interrupt occurs.
    191          
    192          Requires:
    193            - eTimerChannel_ is the channel to which the callback will be assigned
    194            - fpUserCallback_ is the function address (name) for the user's callback
    195          
    196          Promises:
    197            - fpTimerxCallback loaded with fpUserCallback_
    198          */

   \                                 In section .text, align 2, keep-with-next
    199          void TimerAssignCallback(TimerChannelType eTimerChannel_, fnCode_type fpUserCallback_)
    200          {
   \                     TimerAssignCallback: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    201            switch(eTimerChannel_)
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD004             BEQ.N    ??TimerAssignCallback_0
   \        0xE   0x2840             CMP      R0,#+64
   \       0x10   0xD003             BEQ.N    ??TimerAssignCallback_1
   \       0x12   0x2880             CMP      R0,#+128
   \       0x14   0xD004             BEQ.N    ??TimerAssignCallback_2
   \       0x16   0xE004             B.N      ??TimerAssignCallback_3
    202            {
    203              case TIMER_CHANNEL0:
    204              {
    205                break;
   \                     ??TimerAssignCallback_0: (+1)
   \       0x18   0xE006             B.N      ??TimerAssignCallback_4
    206              }
    207              case TIMER_CHANNEL1:
    208              {
    209                fpTimer1Callback = fpUserCallback_;
   \                     ??TimerAssignCallback_1: (+1)
   \       0x1A   0x....             LDR.N    R0,??DataTable9_3
   \       0x1C   0x6005             STR      R5,[R0, #+0]
    210                break;
   \       0x1E   0xE003             B.N      ??TimerAssignCallback_4
    211              }
    212              case TIMER_CHANNEL2:
    213              {
    214                break;
   \                     ??TimerAssignCallback_2: (+1)
   \       0x20   0xE002             B.N      ??TimerAssignCallback_4
    215              }
    216              default:
    217              {
    218                DebugPrintf("Invalid channel\n\r");
   \                     ??TimerAssignCallback_3: (+1)
   \       0x22   0x....             LDR.N    R0,??DataTable9_4
   \       0x24   0x.... 0x....      BL       DebugPrintf
    219              }
    220            } /* end switch(eTimerChannel_) */
    221            
    222          } /* end TimerAssignCallback */
   \                     ??TimerAssignCallback_4: (+1)
   \       0x28   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    223          
    224          
    225          /*--------------------------------------------------------------------------------------------------------------------*/
    226          /* Protected functions                                                                                                */
    227          /*--------------------------------------------------------------------------------------------------------------------*/
    228          
    229          /*--------------------------------------------------------------------------------------------------------------------
    230          Function: TimerInitialize
    231          
    232          Description:
    233          Initializes the State Machine and its variables.
    234          
    235          Requires:
    236            -
    237          
    238          Promises:
    239            - Timer 1 is configured per timer.h INIT settings
    240          */

   \                                 In section .text, align 2, keep-with-next
    241          void TimerInitialize(void)
    242          {
   \                     TimerInitialize: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
    243            u8 au8TimerStarted[] = "Timer1 initialized\n\r";
   \        0x4   0x4668             MOV      R0,SP
   \        0x6   0x....             LDR.N    R1,??DataTable9_5
   \        0x8   0x2215             MOVS     R2,#+21
   \        0xA   0x.... 0x....      BL       __aeabi_memcpy
    244          
    245            /* Channel 0 settings not configured at this time */
    246          
    247            /* Load the block configuration register */
    248            AT91C_BASE_TCB1->TCB_BMR = TCB_BMR_INIT;
   \        0xE   0x....             LDR.N    R0,??DataTable9_6  ;; 0x100800
   \       0x10   0x....             LDR.N    R1,??DataTable9_7  ;; 0x40080104
   \       0x12   0x6008             STR      R0,[R1, #+0]
    249           
    250            /* Load Channel 1 settings and set the default callback */
    251            AT91C_BASE_TC1->TC_CMR = TC1_CMR_INIT;
   \       0x14   0x....             LDR.N    R0,??DataTable9_8  ;; 0xcc403
   \       0x16   0x....             LDR.N    R1,??DataTable9_9  ;; 0x40080044
   \       0x18   0x6008             STR      R0,[R1, #+0]
    252            AT91C_BASE_TC1->TC_RC  = TC1_RC_INIT;
   \       0x1A   0x2025             MOVS     R0,#+37
   \       0x1C   0x....             LDR.N    R1,??DataTable9_10  ;; 0x4008005c
   \       0x1E   0x6008             STR      R0,[R1, #+0]
    253            AT91C_BASE_TC1->TC_IER = TC1_IER_INIT;
   \       0x20   0x2010             MOVS     R0,#+16
   \       0x22   0x....             LDR.N    R1,??DataTable9_11  ;; 0x40080064
   \       0x24   0x6008             STR      R0,[R1, #+0]
    254            AT91C_BASE_TC1->TC_IDR = TC1_IDR_INIT;
   \       0x26   0x20EF             MOVS     R0,#+239
   \       0x28   0x....             LDR.N    R1,??DataTable9_12  ;; 0x40080068
   \       0x2A   0x6008             STR      R0,[R1, #+0]
    255            AT91C_BASE_TC1->TC_CCR = TC1_CCR_INIT;
   \       0x2C   0x2002             MOVS     R0,#+2
   \       0x2E   0x....             LDR.N    R1,??DataTable9_13  ;; 0x40080040
   \       0x30   0x6008             STR      R0,[R1, #+0]
    256           
    257            fpTimer1Callback = TimerDefaultCallback;
   \       0x32   0x....             LDR.N    R0,??DataTable9_14
   \       0x34   0x....             LDR.N    R1,??DataTable9_3
   \       0x36   0x6008             STR      R0,[R1, #+0]
    258          
    259            /* Channel 2 settings not configured at this time */
    260            
    261            /* If good initialization, set state to Idle */
    262            if( 1 )
    263            {
    264              /* Enable required interrupts */
    265              NVIC_ClearPendingIRQ(IRQn_TC1);
   \       0x38   0x2017             MOVS     R0,#+23
   \       0x3A   0x.... 0x....      BL       NVIC_ClearPendingIRQ
    266              NVIC_EnableIRQ(IRQn_TC1);
   \       0x3E   0x2017             MOVS     R0,#+23
   \       0x40   0x.... 0x....      BL       NVIC_EnableIRQ
    267              Timer_StateMachine = TimerSM_Idle;
   \       0x44   0x.... 0x....      ADR.W    R0,TimerSM_Idle
   \       0x48   0x....             LDR.N    R1,??DataTable9_15
   \       0x4A   0x6008             STR      R0,[R1, #+0]
    268              DebugPrintf(au8TimerStarted);
   \       0x4C   0x4668             MOV      R0,SP
   \       0x4E   0x.... 0x....      BL       DebugPrintf
    269              
    270              /* Flag that the Timer task is ready */
    271              G_u32ApplicationFlags |= _APPLICATION_FLAGS_TIMER;
   \       0x52   0x....             LDR.N    R0,??DataTable9_16
   \       0x54   0x6801             LDR      R1,[R0, #+0]
   \       0x56   0xF051 0x0120      ORRS     R1,R1,#0x20
   \       0x5A   0x6001             STR      R1,[R0, #+0]
    272            }
    273            else
    274            {
    275              /* The task isn't properly initialized, so shut it down and don't run */
    276              Timer_StateMachine = TimerSM_FailedInit;
    277            }
    278          
    279          } /* end TimerInitialize() */
   \       0x5C   0xB007             ADD      SP,SP,#+28
   \       0x5E   0xBD00             POP      {PC}             ;; return
    280          
    281            
    282          /*----------------------------------------------------------------------------------------------------------------------
    283          Function TimerRunActiveState()
    284          
    285          Description:
    286          Selects and runs one iteration of the current state in the state machine.
    287          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    288          may take 1ms / n to execute.
    289          
    290          Requires:
    291            - State machine function pointer points at current state
    292          
    293          Promises:
    294            - Calls the function to pointed by the state machine function pointer
    295          */

   \                                 In section .text, align 2, keep-with-next
    296          void TimerRunActiveState(void)
    297          {
   \                     TimerRunActiveState: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    298            Timer_StateMachine();
   \        0x2   0x....             LDR.N    R0,??DataTable9_15
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0x4780             BLX      R0
    299          
    300          } /* end TimerRunActiveState */
   \        0x8   0xBD01             POP      {R0,PC}          ;; return
    301          
    302          
    303          /*--------------------------------------------------------------------------------------------------------------------*/
    304          /* Private functions                                                                                                  */
    305          /*--------------------------------------------------------------------------------------------------------------------*/
    306            
    307          /*----------------------------------------------------------------------------------------------------------------------
    308          Function TimerDefaultCallback()
    309          
    310          Description:
    311          An empty function that the Timer Callback points to.  Expected that the 
    312          user will set their own.
    313          
    314          Requires:
    315            - 
    316          
    317          Promises:
    318            - 
    319          */

   \                                 In section .text, align 2
    320          inline void TimerDefaultCallback(void)
    321          {
    322          } /* End TimerDefaultCallback() */
   \                     TimerDefaultCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    323          
    324          
    325          /*----------------------------------------------------------------------------------------------------------------------
    326          ISR: TC1_IrqHandler
    327          
    328          Description:
    329          Parses the TC1 interrupts and handles them appropriately.  Note that all TC1
    330          interrupts are ORed and will trigger this handler, therefore any expected interrupt 
    331          that is enabled must be parsed out and handled.
    332          
    333          Requires:
    334            - 
    335          
    336          Promises:
    337            - If Channel1 RC: Timer Channel 1 is reset
    338          */

   \                                 In section .text, align 2, keep-with-next
    339          void TC1_IrqHandler(void)
    340          {
   \                     TC1_IrqHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    341            /* Check for RC compare interrupt - reading TC_SR clears the bit if set */
    342            if(AT91C_BASE_TC1->TC_SR & AT91C_TC_CPCS)
   \        0x2   0x....             LDR.N    R0,??DataTable9_17  ;; 0x40080060
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0x06C0             LSLS     R0,R0,#+27
   \        0x8   0xD506             BPL.N    ??TC1_IrqHandler_0
    343            {
    344              Timer_u32Timer1Counter++;
   \        0xA   0x....             LDR.N    R0,??DataTable9_18
   \        0xC   0x6801             LDR      R1,[R0, #+0]
   \        0xE   0x1C49             ADDS     R1,R1,#+1
   \       0x10   0x6001             STR      R1,[R0, #+0]
    345              fpTimer1Callback();
   \       0x12   0x....             LDR.N    R0,??DataTable9_3
   \       0x14   0x6800             LDR      R0,[R0, #+0]
   \       0x16   0x4780             BLX      R0
    346            }
    347          
    348            /* Clear the TC0 pending flag and exit */
    349            NVIC->ICPR[0] = (1 << IRQn_TC1);
   \                     ??TC1_IrqHandler_0: (+1)
   \       0x18   0xF45F 0x0000      MOVS     R0,#+8388608
   \       0x1C   0x....             LDR.N    R1,??DataTable9_1  ;; 0xe000e280
   \       0x1E   0x6008             STR      R0,[R1, #+0]
    350            
    351          } /* end TC1_IrqHandler() */
   \       0x20   0xBD01             POP      {R0,PC}          ;; return
    352          
    353          
    354          /**********************************************************************************************************************
    355          State Machine Function Definitions
    356          **********************************************************************************************************************/
    357          
    358          /*-------------------------------------------------------------------------------------------------------------------*/
    359          /* Wait for a message to be queued */

   \                                 In section .text, align 4, keep-with-next
    360          static void TimerSM_Idle(void)
    361          {
    362             
    363          } /* end TimerSM_Idle() */
   \                     TimerSM_Idle: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \        0x0   0xE000'E280        DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \        0x0   0x4008'0000        DC32     0x40080000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \        0x0   0x....'....        DC32     fpTimer1Callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \        0x0   0x0010'0800        DC32     0x100800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \        0x0   0x4008'0104        DC32     0x40080104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \        0x0   0x000C'C403        DC32     0xcc403

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \        0x0   0x4008'0044        DC32     0x40080044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \        0x0   0x4008'005C        DC32     0x4008005c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \        0x0   0x4008'0064        DC32     0x40080064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \        0x0   0x4008'0068        DC32     0x40080068

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_13:
   \        0x0   0x4008'0040        DC32     0x40080040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_14:
   \        0x0   0x....'....        DC32     TimerDefaultCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_15:
   \        0x0   0x....'....        DC32     Timer_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_16:
   \        0x0   0x....'....        DC32     G_u32ApplicationFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_17:
   \        0x0   0x4008'0060        DC32     0x40080060

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_18:
   \        0x0   0x....'....        DC32     Timer_u32Timer1Counter

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x49 0x6E          DC8 "Invalid channel\012\015"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x6E 0x65    
   \              0x6C 0x0A    
   \              0x0D 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x54 0x69          DC8 "Timer1 initialized\012\015"
   \              0x6D 0x65    
   \              0x72 0x31    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    364               
    365          
    366          #if 0
    367          /*-------------------------------------------------------------------------------------------------------------------*/
    368          /* Handle an error */
    369          static void TimerSM_Error(void)          
    370          {
    371            
    372          } /* end TimerSM_Error() */
    373          #endif
    374          
    375          /*-------------------------------------------------------------------------------------------------------------------*/
    376          /* State to sit in if init failed */
    377          static void TimerSM_FailedInit(void)          
    378          {
    379              
    380          } /* end TimerSM_FailedInit() */
    381          
    382          
    383          /*--------------------------------------------------------------------------------------------------------------------*/
    384          /* End of File                                                                                                        */
    385          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   NVIC_ClearPendingIRQ
       0   NVIC_EnableIRQ
       8   TC1_IrqHandler
         8   -- Indirect call
      16   TimerAssignCallback
        16   -> DebugPrintf
       0   TimerDefaultCallback
       0   TimerGetTime
      32   TimerInitialize
        32   -> DebugPrintf
        32   -> NVIC_ClearPendingIRQ
        32   -> NVIC_EnableIRQ
        32   -> __aeabi_memcpy
       8   TimerRunActiveState
         8   -- Indirect call
       0   TimerSM_Idle
       0   TimerSet
       0   TimerStart
       0   TimerStop


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_13
       4  ??DataTable9_14
       4  ??DataTable9_15
       4  ??DataTable9_16
       4  ??DataTable9_17
       4  ??DataTable9_18
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
      20  ?_0
      24  ?_1
       4  G_u32TimerFlags
      22  NVIC_ClearPendingIRQ
      22  NVIC_EnableIRQ
      34  TC1_IrqHandler
      42  TimerAssignCallback
       2  TimerDefaultCallback
      16  TimerGetTime
      96  TimerInitialize
      10  TimerRunActiveState
       2  TimerSM_Idle
      16  TimerSet
      18  TimerStart
      18  TimerStop
       4  Timer_StateMachine
       4  Timer_u32Timer1Counter
       4  fpTimer1Callback

 
  16 bytes in section .bss
  44 bytes in section .rodata
 374 bytes in section .text
 
 372 bytes of CODE  memory (+ 2 bytes shared)
  44 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: none
