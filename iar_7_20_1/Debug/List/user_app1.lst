###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.2.160/W32 for ARM         14/Oct/2018  14:46:29
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_common\application\user_app1.c
#    Command line =  
#        -f C:\Users\BUDWA_~1\AppData\Local\Temp\EW7C75.tmp
#        (C:\Embedded\Firmware\git_Razor_Atmel\firmware_common\application\user_app1.c
#        -D EIE1 --preprocess=c
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\List
#        -lC
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\List
#        -o
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\ -I
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\..\bsp\
#        -I
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\..\drivers\
#        -I
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\..\application\
#        -I
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\
#        -I
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\application\
#        -I
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\cmsis\
#        -I
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\drivers\
#        -On --use_c++_inline --require_prototypes -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.1\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.1\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\List\user_app1.lst
#    Object file  =  
#        C:\Embedded\Firmware\git_Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\Obj\user_app1.o
#
###############################################################################

C:\Embedded\Firmware\git_Razor_Atmel\firmware_common\application\user_app1.c
      1          /**********************************************************************************************************************
      2          File: user_app1.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app1 as a template:
      6           1. Copy both user_app1.c and user_app1.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app1" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp1" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP1" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app1.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserApp1Initialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserApp1RunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_UserApp1"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserApp1Flags;                       /* Global state flags */
   \                     G_u32UserApp1Flags:
   \        0x0                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     50          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     51          
     52          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     53          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     54          
     55          
     56          /***********************************************************************************************************************
     57          Global variable definitions with scope limited to this local application.
     58          Variable names shall start with "UserApp1_" and be declared as static.
     59          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     60          static fnCode_type UserApp1_StateMachine;            /* The state machine function pointer */
   \                     UserApp1_StateMachine:
   \        0x0                      DS8 4
     61          //static u32 UserApp1_u32Timeout;                      /* Timeout counter used across states */
     62          
     63          
     64          /**********************************************************************************************************************
     65          Function Definitions
     66          **********************************************************************************************************************/
     67          
     68          /*--------------------------------------------------------------------------------------------------------------------*/
     69          /* Public functions                                                                                                   */
     70          /*--------------------------------------------------------------------------------------------------------------------*/
     71          
     72          /*--------------------------------------------------------------------------------------------------------------------*/
     73          /* Protected functions                                                                                                */
     74          /*--------------------------------------------------------------------------------------------------------------------*/
     75          
     76          /*--------------------------------------------------------------------------------------------------------------------
     77          Function: UserApp1Initialize
     78          
     79          Description:
     80          Initializes the State Machine and its variables.
     81          
     82          Requires:
     83            -
     84          
     85          Promises:
     86            - 
     87          */

   \                                 In section .text, align 2, keep-with-next
     88          void UserApp1Initialize(void)
     89          {
     90            HEARTBEAT_OFF();
   \                     UserApp1Initialize: (+1)
   \        0x0   0xF05F 0x4000      MOVS     R0,#-2147483648
   \        0x4   0x....             LDR.N    R1,??DataTable2  ;; 0x400e0c30
   \        0x6   0x6008             STR      R0,[R1, #+0]
     91           
     92            /* If good initialization, set state to Idle */
     93            if( 1 )
     94            {
     95              UserApp1_StateMachine = UserApp1SM_Idle;
   \        0x8   0x.... 0x....      ADR.W    R0,UserApp1SM_Idle
   \        0xC   0x....             LDR.N    R1,??DataTable2_1
   \        0xE   0x6008             STR      R0,[R1, #+0]
     96            }
     97            else
     98            {
     99              /* The task isn't properly initialized, so shut it down and don't run */
    100              UserApp1_StateMachine = UserApp1SM_Error;
    101            }
    102          
    103          } /* end UserApp1Initialize() */
   \       0x10   0x4770             BX       LR               ;; return
    104          
    105            
    106          /*----------------------------------------------------------------------------------------------------------------------
    107          Function UserApp1RunActiveState()
    108          
    109          Description:
    110          Selects and runs one iteration of the current state in the state machine.
    111          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    112          may take 1ms / n to execute.
    113          
    114          Requires:
    115            - State machine function pointer points at current state
    116          
    117          Promises:
    118            - Calls the function to pointed by the state machine function pointer
    119          */

   \                                 In section .text, align 2, keep-with-next
    120          void UserApp1RunActiveState(void)
    121          {
   \                     UserApp1RunActiveState: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    122            UserApp1_StateMachine();
   \        0x2   0x....             LDR.N    R0,??DataTable2_1
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0x4780             BLX      R0
    123          
    124          } /* end UserApp1RunActiveState */
   \        0x8   0xBD01             POP      {R0,PC}          ;; return
    125          
    126          
    127          /*--------------------------------------------------------------------------------------------------------------------*/
    128          /* Private functions                                                                                                  */
    129          /*--------------------------------------------------------------------------------------------------------------------*/
    130          
    131          
    132          /**********************************************************************************************************************
    133          State Machine Function Definitions
    134          **********************************************************************************************************************/
    135          
    136          /*-------------------------------------------------------------------------------------------------------------------*/
    137          /* Wait for ??? */

   \                                 In section .text, align 4, keep-with-next
    138          static void UserApp1SM_Idle(void)
    139          {
   \                     UserApp1SM_Idle: (+1)
   \        0x0   0xB410             PUSH     {R4}
    140            static u32 u32Counter = 0;
    141            static bool bLEDState = FALSE;
    142            static u32 LEDPeriod = COUNTER_MAX_LIMIT_MS;
    143            
    144            u32Counter++;
   \        0x2   0x....             LDR.N    R1,??DataTable2_2
   \        0x4   0x6808             LDR      R0,[R1, #+0]
   \        0x6   0x1C40             ADDS     R0,R0,#+1
   \        0x8   0x6008             STR      R0,[R1, #+0]
    145            
    146            if(u32Counter == LEDPeriod)
   \        0xA   0x....             LDR.N    R2,??DataTable2_3
   \        0xC   0x6808             LDR      R0,[R1, #+0]
   \        0xE   0x6813             LDR      R3,[R2, #+0]
   \       0x10   0x4298             CMP      R0,R3
   \       0x12   0xD120             BNE.N    ??UserApp1SM_Idle_0
    147            {
    148              if(bLEDState == FALSE)
   \       0x14   0x....             LDR.N    R3,??DataTable2_4
   \       0x16   0x7818             LDRB     R0,[R3, #+0]
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD104             BNE.N    ??UserApp1SM_Idle_1
    149              {
    150                HEARTBEAT_ON();
   \       0x1C   0xF05F 0x4000      MOVS     R0,#-2147483648
   \       0x20   0x....             LDR.N    R4,??DataTable2_5  ;; 0x400e0c34
   \       0x22   0x6020             STR      R0,[R4, #+0]
   \       0x24   0xE003             B.N      ??UserApp1SM_Idle_2
    151              }
    152              else
    153              {
    154                HEARTBEAT_OFF();
   \                     ??UserApp1SM_Idle_1: (+1)
   \       0x26   0xF05F 0x4000      MOVS     R0,#-2147483648
   \       0x2A   0x....             LDR.N    R4,??DataTable2  ;; 0x400e0c30
   \       0x2C   0x6020             STR      R0,[R4, #+0]
    155              }
    156              bLEDState = !bLEDState;
                               ^
Warning[Pe188]: enumerated type mixed with another type
   \                     ??UserApp1SM_Idle_2: (+1)
   \       0x2E   0x7818             LDRB     R0,[R3, #+0]
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD102             BNE.N    ??UserApp1SM_Idle_3
   \       0x34   0x2001             MOVS     R0,#+1
   \       0x36   0x7018             STRB     R0,[R3, #+0]
   \       0x38   0xE001             B.N      ??UserApp1SM_Idle_4
   \                     ??UserApp1SM_Idle_3: (+1)
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0x7018             STRB     R0,[R3, #+0]
    157              
    158              if(LEDPeriod == COUNTER_MIN_LIMIT_MS)
   \                     ??UserApp1SM_Idle_4: (+1)
   \       0x3E   0x6810             LDR      R0,[R2, #+0]
   \       0x40   0x280A             CMP      R0,#+10
   \       0x42   0xD103             BNE.N    ??UserApp1SM_Idle_5
    159              {
    160                LEDPeriod = COUNTER_MAX_LIMIT_MS;
   \       0x44   0xF44F 0x70FA      MOV      R0,#+500
   \       0x48   0x6010             STR      R0,[R2, #+0]
   \       0x4A   0xE002             B.N      ??UserApp1SM_Idle_6
    161              }
    162              else
    163              {
    164                LEDPeriod -= 10;
   \                     ??UserApp1SM_Idle_5: (+1)
   \       0x4C   0x6810             LDR      R0,[R2, #+0]
   \       0x4E   0x380A             SUBS     R0,R0,#+10
   \       0x50   0x6010             STR      R0,[R2, #+0]
    165              }
    166              
    167              u32Counter = 0;
   \                     ??UserApp1SM_Idle_6: (+1)
   \       0x52   0x2000             MOVS     R0,#+0
   \       0x54   0x6008             STR      R0,[R1, #+0]
    168            }
    169            
    170          } /* end UserApp1SM_Idle() */
   \                     ??UserApp1SM_Idle_0: (+1)
   \       0x56   0xBC10             POP      {R4}
   \       0x58   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     `UserApp1SM_Idle::u32Counter`:
   \        0x0                      DS8 4

   \                                 In section .bss, align 1
   \                     `UserApp1SM_Idle::bLEDState`:
   \        0x0                      DS8 1

   \                                 In section .data, align 4
   \                     `UserApp1SM_Idle::LEDPeriod`:
   \        0x0   0x0000'01F4        DC32 500

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x400E'0C30        DC32     0x400e0c30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x....'....        DC32     UserApp1_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x....'....        DC32     `UserApp1SM_Idle::u32Counter`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0x....'....        DC32     `UserApp1SM_Idle::LEDPeriod`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x....'....        DC32     `UserApp1SM_Idle::bLEDState`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0x400E'0C34        DC32     0x400e0c34
    171              
    172          
    173          /*-------------------------------------------------------------------------------------------------------------------*/
    174          /* Handle an error */
    175          static void UserApp1SM_Error(void)          
    176          {
    177            
    178          } /* end UserApp1SM_Error() */
    179          
    180          
    181          
    182          /*--------------------------------------------------------------------------------------------------------------------*/
    183          /* End of File                                                                                                        */
    184          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   UserApp1Initialize
       8   UserApp1RunActiveState
         8   -- Indirect call
       4   UserApp1SM_Idle


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  G_u32UserApp1Flags
       4  LEDPeriod
      18  UserApp1Initialize
      10  UserApp1RunActiveState
      90  UserApp1SM_Idle
       4  UserApp1_StateMachine
       1  bLEDState
       4  u32Counter

 
  13 bytes in section .bss
   4 bytes in section .data
 142 bytes in section .text
 
 142 bytes of CODE memory
  17 bytes of DATA memory

Errors: none
Warnings: 1
